// @version=4
// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © x11joe
// Credit given to @midtownsk8rguy for some original source code parts (I was given permission to do so). I simply modified to add Pearson's R and the ability to always draw lines matching a certain Pearson's R as well as my own unique strategy involving using Pearson's R as it changes over time.
// © GM 2023

//strategy(title="Linear Regression Pearson's R - Trend Channel Strategy", overlay=true,initial_capital=1000,commission_type=strategy.commission.percent,commission_value=0.26,default_qty_type=strategy.percent_of_equity,default_qty_value=100)

study(title="LR Pearson's R", overlay=true)
//period     = input(     200, "Period"       , input.integer, minval=3)
deviations              = input(1.0, "Deviation(s)" , input.float  , minval=0.1, step=0.1)
extendType              = input("None", "Extend Method", input.string , options=["Right","None"])=="Right" ? extend.right : extend.none
minPeriod               = input(400,"Min Period",input.integer)//24 would be 48 hours (2 days) on the 2 hour.
stepBy                  = input(20,"Step By (Speeds Up Calculation, MUST be multiple of min and max)",input.integer)
maxPeriod               = input(600,"Max Period",input.integer)//168 would be 2 weeks or 14 days on the 2 hour.
pearsonsIdealPositive   = input(0.85,"Pearson's Ideal Value +",input.float)
pearsonsIdealNegative   = input(-0.71,"Pearson's Ideal Value -",input.float)
useRealTime             = input(false,"Use Real Time Data (Good for Rewind Mode)",input.bool)
_colorCentral           = input(color.new(color.yellow,   35), "Mid", inline = "mid")
mid_style_string        = input("Solid","Style",options = ["Dotted","Dashed","Solid"], inline = "mid")
mid_line_width          = input(3, "Width", minval = 0, maxval = 20, step = 1, inline = "mid")
mid_line_style          = mid_style_string == 'Dotted' ? line.style_dotted : mid_style_string == 'Dashed' ? line.style_dashed : line.style_solid
 
_colorUp                = input(color.new(color.gray,   35), "Up", inline = "stdev")
_colorDown              = input(color.new(color.gray,   35), "Down", inline = "stdev")
stdev_style_string      = input("Solid","Style",options = ["Dotted","Dashed","Solid"], inline='stdev')
stdev_line_width        = input(2, "Width", minval = 0, maxval = 20, step = 1, inline = "stdev")
stdev_line_style        = stdev_style_string == 'Dotted' ? line.style_dotted : stdev_style_string == 'Dashed' ? line.style_dashed : line.style_solid
show_label              = input(false, "Show labels")

//Initially Define the variables
var int tempPeriod      = na
var int periodMinusOne = na
var float Ex = na
var float Ey = na
var float Ex2 = na
var float Ey2 = na
var float Exy = na
var float ExT2 = na //Sum of X THEN Squared
var float EyT2 = na //Sum of Y THEN Squared
var float PearsonsR = na
var float ExEx = na
var float slope = na
var float linearRegression = na
var float intercept = na
var float deviation = na
var float startingPointY = na

//Loop through the max period back to find situations in which the Pearson's is either -8.0 or 8.0
var int perfectPeriod = na
var float maxPearsons = na
var float maxStartingPointY = na
var float maxLinearRegression = na
var float maxDeviation = na

for k=maxPeriod to minPeriod by stepBy
    periodMinusOne := k-1
    Ex := 0.0, Ey := 0.0, Ex2 := 0.0,Ey2 := 0.0, Exy := 0.0, for i=0 to periodMinusOne
        closeI = nz(close[i]), Ex := Ex + i, Ey := Ey + closeI, Ex2 := Ex2 + (i * i),Ey2 := Ey2 + (closeI * closeI), Exy := Exy + (closeI * i)
    ExT2 := pow(Ex,2.0) //Sum of X THEN Squared
    EyT2 := pow(Ey,2.0) //Sym of Y THEN Squared
    PearsonsR := (Exy - ((Ex*Ey)/k))/(sqrt(Ex2-(ExT2/k))*sqrt(Ey2-(EyT2/k)))
    ExEx := Ex * Ex, slope = Ex2==ExEx ? 0.0 : (k * Exy - Ex * Ey) / (k * Ex2 - ExEx)
    linearRegression := (Ey - slope * Ex) / k
    intercept := linearRegression + bar_index * slope
    deviation := 0.0
    for i=0 to periodMinusOne
        deviation := deviation + pow(nz(close[i]) - (intercept - slope * (bar_index[i])), 2.0)
    deviation := deviations * sqrt(deviation / periodMinusOne)
    startingPointY := linearRegression + slope * periodMinusOne
    perfectPeriod:=k
    if(k==maxPeriod)
        maxPearsons:=PearsonsR
        maxStartingPointY:=startingPointY
        maxLinearRegression:=linearRegression
        maxDeviation := deviation
    if(PearsonsR>=pearsonsIdealPositive or PearsonsR<=pearsonsIdealNegative)
        break//exit the loop early and a line is chosen.

var line upperChannelLine1 = na  , 
var line upperChannelLine2 = na  , 
var line upperChannelLine3 = na  , 
var line upperChannelLine4 = na  , 
var line upperChannelLine5 = na  , 
var line upperChannelLine6 = na  , 
var line upperChannelLine7 = na  , 
var line upperChannelLine8 = na  , 
var line medianChannelLine = na  , 
var line lowerChannelLine1 = na, 
var line lowerChannelLine2 = na, 
var line lowerChannelLine3 = na, 
var line lowerChannelLine4 = na, 
var line lowerChannelLine5 = na, 
var line lowerChannelLine6 = na, 
var line lowerChannelLine7 = na, 
var line lowerChannelLine8 = na, 
var line upperTradeLine = na, 
var line lowerTradeLine = na, 
var line maxTradeLine = na, 
var line maxUpperChannelLine = na, 
var line maxLowerChannelLine = na

upperChannelLine1  := line.new(bar_index - perfectPeriod + 1, startingPointY + deviation, bar_index, linearRegression + deviation, xloc.bar_index, extendType, _colorUp, style = stdev_line_style, width = stdev_line_width)
upperChannelLine2  := line.new(bar_index - perfectPeriod + 1, startingPointY + deviation * 2, bar_index, linearRegression + deviation * 2, xloc.bar_index, extendType, _colorUp, style = stdev_line_style, width = stdev_line_width)
upperChannelLine3  := line.new(bar_index - perfectPeriod + 1, startingPointY + deviation * 3, bar_index, linearRegression + deviation * 3, xloc.bar_index, extendType, _colorUp, style = stdev_line_style, width = stdev_line_width)
upperChannelLine4  := line.new(bar_index - perfectPeriod + 1, startingPointY + deviation * 4, bar_index, linearRegression + deviation * 4, xloc.bar_index, extendType, _colorUp, style = stdev_line_style, width = stdev_line_width)
upperChannelLine5  := line.new(bar_index - perfectPeriod + 1, startingPointY + deviation * 5, bar_index, linearRegression + deviation * 5, xloc.bar_index, extendType, _colorUp, style = stdev_line_style, width = stdev_line_width)
upperChannelLine6  := line.new(bar_index - perfectPeriod + 1, startingPointY + deviation * 6, bar_index, linearRegression + deviation * 6, xloc.bar_index, extendType, _colorUp, style = stdev_line_style, width = stdev_line_width)
upperChannelLine7  := line.new(bar_index - perfectPeriod + 1, startingPointY + deviation * 7, bar_index, linearRegression + deviation * 7, xloc.bar_index, extendType, _colorUp, style = stdev_line_style, width = stdev_line_width)
upperChannelLine8  := line.new(bar_index - perfectPeriod + 1, startingPointY + deviation * 8, bar_index, linearRegression + deviation * 8, xloc.bar_index, extendType, _colorUp, style = stdev_line_style, width = stdev_line_width)

medianChannelLine := line.new(bar_index - perfectPeriod + 1, startingPointY            , bar_index, linearRegression            , xloc.bar_index, extendType, _colorCentral, mid_line_style, width = mid_line_width)

lowerChannelLine1  := line.new(bar_index - perfectPeriod + 1, startingPointY - deviation, bar_index, linearRegression - deviation, xloc.bar_index, extendType, _colorDown, style = stdev_line_style, width = stdev_line_width)
lowerChannelLine2  := line.new(bar_index - perfectPeriod + 1, startingPointY - deviation * 2, bar_index, linearRegression - deviation * 2, xloc.bar_index, extendType, _colorDown, style = stdev_line_style, width = stdev_line_width)
lowerChannelLine3  := line.new(bar_index - perfectPeriod + 1, startingPointY - deviation * 3, bar_index, linearRegression - deviation * 3, xloc.bar_index, extendType, _colorDown, style = stdev_line_style, width = stdev_line_width)
lowerChannelLine4  := line.new(bar_index - perfectPeriod + 1, startingPointY - deviation * 4, bar_index, linearRegression - deviation * 4, xloc.bar_index, extendType, _colorDown, style = stdev_line_style, width = stdev_line_width)
lowerChannelLine5  := line.new(bar_index - perfectPeriod + 1, startingPointY - deviation * 5, bar_index, linearRegression - deviation * 5, xloc.bar_index, extendType, _colorDown, style = stdev_line_style, width = stdev_line_width)
lowerChannelLine6  := line.new(bar_index - perfectPeriod + 1, startingPointY - deviation * 6, bar_index, linearRegression - deviation * 6, xloc.bar_index, extendType, _colorDown, style = stdev_line_style, width = stdev_line_width)
lowerChannelLine7  := line.new(bar_index - perfectPeriod + 1, startingPointY - deviation * 7, bar_index, linearRegression - deviation * 7, xloc.bar_index, extendType, _colorDown, style = stdev_line_style, width = stdev_line_width)
lowerChannelLine8  := line.new(bar_index - perfectPeriod + 1, startingPointY - deviation * 8, bar_index, linearRegression - deviation * 8, xloc.bar_index, extendType, _colorDown, style = stdev_line_style, width = stdev_line_width)

var bool maxDowntrend = na
var bool currentDownTrend = na

var label pearsonsRLabel = na
var label pearsonsRMaxLabel = na

if show_label
    pearsonsRLabel := label.new(bar_index - perfectPeriod + 1,startingPointY - deviation * 1.5,text=tostring(PearsonsR)+" P=("+tostring(perfectPeriod)+") - Short Trend", color=color.rgb(69, 69, 69),style=label.style_labelup,textcolor=color.white,size=size.normal)
    pearsonsRMaxLabel := label.new(bar_index - perfectPeriod + 1,startingPointY - deviation * 3.5,text=tostring(maxPearsons)+" P=("+tostring(maxPeriod)+") - Long Trend", color=color.rgb(69, 69, 69),style=label.style_labelup,textcolor=color.white,size=size.normal)
    
if barstate.islast    
    stdevLabel = label.new(bar_index, linearRegression, str.format("{0,number,#.##%}", deviation / close), color=color.rgb(69, 69, 69, 100), textcolor=color.white)
    label.delete(stdevLabel[1])
    //label.set_xy(stdevLabel, bar_index, linearRegression)
    //label.set_text(str.format("{0,number,#.##%}", deviation / close))

//Clear the old lines and label
line.delete(upperChannelLine1[1]), 
line.delete(upperChannelLine2[1]), 
line.delete(upperChannelLine3[1]), 
line.delete(upperChannelLine4[1]), 
line.delete(upperChannelLine5[1]), 
line.delete(upperChannelLine6[1]), 
line.delete(upperChannelLine7[1]), 
line.delete(upperChannelLine8[1]), 

line.delete(medianChannelLine[1]),

line.delete(lowerChannelLine1[1]), 
line.delete(lowerChannelLine2[1]), 
line.delete(lowerChannelLine3[1]), 
line.delete(lowerChannelLine4[1]), 
line.delete(lowerChannelLine5[1]), 
line.delete(lowerChannelLine6[1]), 
line.delete(lowerChannelLine7[1]), 
line.delete(lowerChannelLine8[1]), 

line.delete(upperTradeLine[1]), 
line.delete(lowerTradeLine[1]), 
line.delete(maxTradeLine[1]),
line.delete(maxUpperChannelLine[1]),
line.delete(maxLowerChannelLine[1])
label.delete(pearsonsRLabel[1]),
label.delete(pearsonsRMaxLabel[1])

// if(useRealTime==false)
//     if(PearsonsR<0) 
//         strategy.entry("Long", strategy.long)//5 percent loss at any time is OK
//     if(PearsonsR>0)
//         strategy.entry("Short",strategy.short)//5 Percent loss at any time is okay
// else
//     if(barstate.isrealtime==true)
//         if(PearsonsR<0) 
//             strategy.entry("Long", strategy.long)//5 percent loss at any time is OK
//         if(PearsonsR>0)
//             strategy.entry("Short",strategy.short)//5 Percent loss at any time is okay